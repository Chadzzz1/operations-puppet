#!/bin/sh

set -eu
git_user=gitpuppet
if [ "$(whoami)" = "gitpuppet" ]
then
  printf "This script should only be run as a real users.  gitpuppet should use /usr/local/bin/puppet-merge.py"
  exit 1
fi

lock() {
  LABS_PRIVATE=$1
  if [ ${LABS_PRIVATE} -eq 1 ]
  then
    LOCKFILE=/var/lock/puppet-merge-labs-lock
  else
    LOCKFILE=/var/lock/puppet-merge-prod-lock
  fi
  LOCKFD=9
  eval "exec $LOCKFD>\"$LOCKFILE\""
  trap "rm -f $LOCKFILE" EXIT
  if ! flock -xn $LOCKFD
  then
      trap EXIT
      # Any subprocess of the script that holds the lock will also have an open
      # filehandle to $LOCKFILE.  Grab just one such PID for pstree (doesn't
      # matter which).
      PSTREE=$(pstree -su $(fuser $LOCKFILE 2>/dev/null | awk '{print $1}'))
      # If given an empty command line, or a nonexistent PID, pstree -su will
      # output all processes on the system, which isn't helpful.  Normal usage
      # of this script should only ever yield a single line of pstree output.
      if [ $(echo "$PSTREE" | wc -l) -eq 1 ]
      then
        PSTREE="locking process tree: $PSTREE"
      else
        PSTREE="could not determine lock holder"
      fi
      die "failed to lock, another puppet-merge running on this host?\n${PSTREE}"
  fi
}

# Colorized output helpers
RED=$(tput bold; tput setaf 1)
GREEN=$(tput bold; tput setaf 2)
RESET=$(tput sgr0)
FORCE=0
USAGE=0
QUIET=0
LABS_PRIVATE=0
DIFF_ONLY=0

usage="$(basename ${0}) [-y|--yes] [SHA1]

Fetches changes from origin and from all submodules.
Shows diffs between HEAD and FETCH_HEAD, including diffs
of submodule changes.

If the changes are acceptable, HEAD will be fast-forwarded
to FETCH_HEAD.

It also runs the conftool merge if necessary.

SHA1 equals HEAD if not specified
"

TEMP=$(getopt -o yhqd --long yes,help,quiet,labsprivate,diffs -n "$0" -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"
while true; do
    case "$1" in
        -y|--yes) FORCE=1; shift ;;
        -h|--help) USAGE=1; shift ;;
        -q|--quiet) QUIET=1; shift ;;
        -d|--diffs) DIFF_ONLY=1; shift ;;
        -p|--labsprivate) LABS_PRIVATE=1; shift ;;
        --) shift ; break ;;
        *) echo "Internal error!"; exit 1 ;;
    esac
done

if [ $USAGE -eq 1 ]; then
    echo "$usage" && exit 0;
fi

lock $LABS_PRIVATE

# From this point continue despite errors on remote masters. After a change
# has been merged on the local master a remote merge failure should not
# cause all remaining masters to be aborted and left out of sync.
set +e

if [ $LABS_PRIVATE -eq 1 ]; then
    # if --labsprivate is used just sync the labsprivate repo
    /usr/local/bin/puppet-merge.py  "$@"
else
    # We want to do a labs merge every time we do an ops merge
    /usr/local/bin/puppet-merge.py  "$@" --labsprivate
    /usr/local/bin/puppet-merge.py "$@" --ops
fi

# puppet-merge.py exits with 99 if no merge was performed
if [ $? -eq 99 ]; then
  exit 0
elif [ $? -ne 0 ]; then
  exit $?
fi

<%- if @servers.has_key?(@fqdn) -%>
# Note: The "true" command is passed on purpose to show that the command passed
# to the SSH sessions is irrelevant. It's the SSH forced command trick on the
# worker end that does the actual work. Note that args (including
# the $sha1 and possible --labsprivate switch) are used.

if [ $LABS_PRIVATE -eq 1 ]; then
  PRIVATE_ARG="--labsprivate"
  BASEDIR="/var/lib/git/labs/private"
else
  PRIVATE_ARG="--ops"
  BASEDIR="/var/lib/git/operations/puppet"
fi

if [ -z ${1:-} ]; then
  fetch_head_sha1=$(git rev-parse FETCH_HEAD)
else
  fetch_head_sha1=${1}
fi

<%- @servers.each do |frontend, workers| -%>
  <%- workers.map{ |w| w['worker']}.select{|name| name != @fqdn}.each do |worker| -%>
su - $git_user -c "ssh -t -t <%= worker -%> true ${PRIVATE_ARG} ${fetch_head_sha1} 2>&1"
if [ $? -eq 0 ]; then
  echo "${GREEN}OK${RESET}: puppet-merge on <%= worker %> succeeded"
else
  echo "${RED}ERROR${RESET}: puppet-merge on <%= worker %> failed"
fi
  <%- end -%>
<%- end -%>

# Only run this once, and only if we're merging the prod repo
if [ $LABS_PRIVATE -eq 0 ]; then
    echo "Now running conftool-merge to sync any changes to conftool data"
    /usr/local/bin/conftool-merge
fi
<%- end -%>
# vim: set syntax=sh:
