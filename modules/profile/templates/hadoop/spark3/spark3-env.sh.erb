#!/usr/bin/env bash
<%#- SPDX-License-Identifier: Apache-2.0 -%>

# NOTE: This file is managed by Puppet.

# This file is sourced when running various Spark programs.
# Copy it as spark-env.sh and edit that to configure Spark for your site.

# Options read when launching programs locally with
# ./bin/run-example or ./bin/spark-submit
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public dns name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append

# Options read by executors and drivers running inside the cluster
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public DNS name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append
# - SPARK_LOCAL_DIRS, storage directories to use on this node for shuffle and RDD data
# - MESOS_NATIVE_JAVA_LIBRARY, to point to your libmesos.so if you use Mesos

# Options read in YARN client mode
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_EXECUTOR_INSTANCES, Number of executors to start (Default: 2)
# - SPARK_EXECUTOR_CORES, Number of cores for the executors (Default: 1).
# - SPARK_EXECUTOR_MEMORY, Memory per Executor (e.g. 1000M, 2G) (Default: 1G)
# - SPARK_DRIVER_MEMORY, Memory for Driver (e.g. 1000M, 2G) (Default: 1G)

# Options for the daemons used in the standalone deploy mode
# - SPARK_MASTER_HOST, to bind the master to a different IP address or hostname
# - SPARK_MASTER_PORT / SPARK_MASTER_WEBUI_PORT, to use non-default ports for the master
# - SPARK_MASTER_OPTS, to set config properties only for the master (e.g. "-Dx=y")
# - SPARK_WORKER_CORES, to set the number of cores to use on this machine
# - SPARK_WORKER_MEMORY, to set how much total memory workers have to give executors (e.g. 1000m, 2g)
# - SPARK_WORKER_PORT / SPARK_WORKER_WEBUI_PORT, to use non-default ports for the worker
# - SPARK_WORKER_INSTANCES, to set the number of worker processes per node
# - SPARK_WORKER_DIR, to set the working directory of worker processes
# - SPARK_WORKER_OPTS, to set config properties only for the worker (e.g. "-Dx=y")
# - SPARK_DAEMON_MEMORY, to allocate to the master, worker and history server themselves (default: 1g).
# - SPARK_HISTORY_OPTS, to set config properties only for the history server (e.g. "-Dx=y")
# - SPARK_SHUFFLE_OPTS, to set config properties only for the external shuffle service (e.g. "-Dx=y")
# - SPARK_DAEMON_JAVA_OPTS, to set config properties for all daemons (e.g. "-Dx=y")
# - SPARK_PUBLIC_DNS, to set the public dns name of the master or workers

# Generic options for the daemons used in the standalone deploy mode
# - SPARK_CONF_DIR      Alternate conf dir. (Default: ${SPARK_HOME}/conf)
# - SPARK_LOG_DIR       Where log files are stored.  (Default: ${SPARK_HOME}/logs)
# - SPARK_PID_DIR       Where the pid file is stored. (Default: /tmp)
# - SPARK_IDENT_STRING  A string representing this instance of spark. (Default: $USER)
# - SPARK_NICENESS      The scheduling priority for daemons. (Default: 0)
# - SPARK_NO_DAEMONIZE  Run the proposed command in the foreground. It will not output a PID file.

# = WMF customizations below =
#
# If /etc/hadoop/conf exists, use it as HADOOP_CONF_DIR
if [ -z "${HADOOP_CONF_DIR}" -a -e "/etc/hadoop/conf" ]; then
  export HADOOP_CONF_DIR=/etc/hadoop/conf
fi

# If /usr/lib/hadoop/native exists, use Hadoop native libs from there
if [ -z "${LD_LIBRARY_PATH}" -a -e /usr/lib/hadoop/lib/native ]; then
    export LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native
fi

if [ -z "${SPARK_HOME}" ]; then
    echo "ERROR: SPARK_HOME must be set before loading ${0}"
    exit 1
else
    echo "SPARK_HOME: ${SPARK_HOME}"
fi

# Select Hadoop library
#
# if [ "${SPARK_HOME}" != /usr/lib/airflow* -a -x "$(command -v hadoop)" ]; then
#    SPARK_DIST_CLASSPATH=$(hadoop classpath)
# fi
HADOOP_VERSION="$(ls $SPARK_HOME/jars/ \
  | grep hadoop-client \
  |  sed 's/^hadoop-client-\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/')"
if [ -z "${HADOOP_VERSION}" ]; then
    echo "ERROR: unknown HADOOP_VERSION"
    exit 1
fi
# 2022-09 We are using Hadoop 3 client lib to connect to an Hadoop 2.10 cluster.
# Hadoop 2.10 version is a backport of version 3 api. That means we can use
# a client lib at version 3 to access it.
# This echo is just to remember the explicit version we are using.
echo "Using Hadoop client lib jars at ${HADOOP_VERSION}, provided by Spark."

# == Determine useful default values for PYSPARK_DRIVER_PYTHON and PYSPARK_PYTHON ==
#
# PYSPARK_DRIVER_PYTHON:
#
# - User's python env.  If CONDA_PREFIX is set, or if SPARK_HOME is a directory
#   site-packages/pyspark directory, assume we want to use ipython (or python)
#   from the user's python env.
#
# - Else, use $PYTHON_PREFIX_GLOBAL/bin/ipython3
#
# NOTE: If we don't end up setting PYSPARK_DRIVER_PYTHON, then built in spark scripts will do
# what they usually do to set it (use system python). I.e. it will default to the
# value of PYSPARK_PYTHON, or the system 'python'.
#
# PYSPARK_PYTHON:
#
# This must be available on worker nodes.
#
# - If we are not running in YARN, then we can safely use the user's python env.
#
# - Else if we are running in YARN, we have no way of using a user's local python env.
#   as the default value here.  It is possible to for users to use a custom python env,
#   but the user will have ship their packed python env to workers, and handle setting
#   PYSPARK_PYTHON to the correct value themselves,
#
#   So, we default PYSPARK_PYTHON to $PYTHON_PREFIX_GLOBAL/bin/python3


# This python env prefix is expected to exist on all potential spark nodes, both masters and workers.
# This will be used for default PYSPARK_*_PYTHON unless a conda env is currently active.
PYTHON_PREFIX_GLOBAL=$(realpath ${PYTHON_PREFIX_GLOBAL:-"<%= @python_prefix_global %>"})

# If a conda environment is active (CONDA_PREFIX is set),
# then assume this is the user's python environment
# If it isn't then check to see if $SPARK_HOME is currently in a pip installed pyspark site-packages
# inside a python environment.  If it is, then assume that is the user's python environment.
# NOTE: At this point SPARK_HOME should be set, either by the user or by the find-spark-home
# script that comes with spark.
PYTHON_PREFIX_USER=$(realpath "${CONDA_PREFIX:-$(dirname $(dirname $(dirname $(dirname $SPARK_HOME))))}")

# Default PYSPARK_DRIVER_PYTHON to ipython3 if running pyspark CLI directly.
if [[ -z "${PYSPARK_DRIVER_PYTHON}" && "${0}" == *pyspark ]]; then

    # If a user's python environment exists and has ipython3, use it
    if [ -n "${PYTHON_PREFIX_USER}" -a -e "${PYTHON_PREFIX_USER}/bin/ipython3" ]; then
        export PYSPARK_DRIVER_PYTHON="${PYTHON_PREFIX_USER}/bin/ipython3"

    # in case the user's python environment exists without ipython3, but does have python3, use it.
    elif [ -n "${PYTHON_PREFIX_USER}" -a -e "${PYTHON_PREFIX_USER}/bin/python3" ]; then
        export PYSPARK_DRIVER_PYTHON="${PYTHON_PREFIX_USER}/bin/python3"

    # Else use PYTHON_PREFIX_GLOBAL's ipython3.
    else
        export PYSPARK_DRIVER_PYTHON="${PYTHON_PREFIX_GLOBAL}/bin/ipython3"

    fi
fi

if [ -z "${PYSPARK_PYTHON}" ]; then
    # Search the CLI opts to find the master option, if it is given.
    # PYSPARK_PYTHON needs to be set to something that will work on remote executors
    # if a conda environment is active.  This will only work if
    # the SparkSession master is being set via the CLI.
    spark_master=''
    for ((i = 1; i <= $#; i++ )); do
       arg="${!i}"
       if [[ "${arg}" == --master ]]; then
           master_index=$((i+1))
           spark_master="${!master_index}"
       elif [[ "${arg}" == --master=* ]]; then
           spark_master="$(echo ${arg} | cut -f2 -d=)"
       fi
    done

    # If not YARN and user env's python exists, we can safely use the user env's python.
    if [[ "${spark_master}" != yarn* && -n "${PYTHON_PREFIX_USER}" && -e "${PYTHON_PREFIX_USER}/bin/python3" ]]; then
        export PYSPARK_PYTHON="${PYTHON_PREFIX_USER}/bin/python3"

    # else use the PYTHON_PREFIX_GLOBAL's python.
    # This MUST exist on all worker nodes.
    else
        export PYSPARK_PYTHON="${PYTHON_PREFIX_GLOBAL}/bin/python3"

    fi
fi

# Note: If PYSPARK_DRIVER_PYTHON and PYSPARK_PYTHON are not set at this point,
# the pyspark script will just use system 'python'.
test -n "${PYSPARK_DRIVER_PYTHON}" && echo "PYSPARK_DRIVER_PYTHON=${PYSPARK_DRIVER_PYTHON}"
test -n "${PYSPARK_PYTHON}" && echo "PYSPARK_PYTHON=${PYSPARK_PYTHON}"