# Late-stage ECS filter for pruning invalid fields or adding supported features
filter {
  if [ecs][version] == "1.7.0" {

    # When running grok on log.original and a grok pattern does not match, move log.original into the message field
    if "_grokparsefailure" in [tags] {
      mutate {
        rename => { "[log][original]" => "message" }
        id => "filter/mutate/ungrokable"
      }
    }

    # Drop the host field if it is the wrong type
    ruby {
      code => "event.remove('host') unless event.get('host').is_a?(Hash)"
    }

    # add normalized_message field and truncate it to 256 characters (since ecs-1.7.0-2)
    ruby {
      code => 'event.set("[normalized][message]", event.get("message")[0..255].downcase) unless event.get("message").nil?'
    }

    # Strip out fields incompatible with ECS
    prune {
      whitelist_names => [
        "^@timestamp$",
        "^agent$",
        "^client$",
        "^cloud$",
        "^container$",
        "^destination$",
        "^dll$",
        "^dns$",
        "^ecs$",
        "^error$",
        "^event$",
        "^file$",
        "^group$",
        "^host$",
        "^http$",
        "^labels$",
        "^log$",
        "^message$",
        "^network$",
        "^normalized$",
        "^observer$",
        "^organization$",
        "^package$",
        "^process$",
        "^registry$",
        "^related$",
        "^rule$",
        "^server$",
        "^service$",
        "^source$",
        "^span$",
        "^tags$",
        "^threat$",
        "^tls$",
        "^trace$",
        "^transaction$",
        "^url$",
        "^user$",
        "^user_agent$",
        "^vulnerability$"
      ]
      id => "filter/prune/ecs_allow_list"
    }
  }
}
