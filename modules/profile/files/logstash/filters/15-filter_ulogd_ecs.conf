# SPDX-License-Identifier: Apache-2.0
filter {
  if [program] == "ulogd" {
    grok {
      match => {
        "message" => [
          "\[fw-%{WORD:[network][direction]}-%{WORD:[event][action]}\] IN=(%{WORD:[observer][ingress][interface][name]})? OUT=(%{WORD:[observer][egress][interface][name]})? MAC=([a-f0-9]{2}:){12}(?<[network][type]>[a-f0-9]{2}:[a-f0-9]{2}).*SRC=%{IP:[source][ip]} DST=%{IP:[destination][ip]}.*LEN=%{INT:[labels][len]}.*(TTL|HOPLIMIT)=%{INT:[labels][ttl]}.*PROTO=%{WORD:[network][transport]} SPT=%{INT:[source][port]} DPT=%{INT:[destination][port]}%{GREEDYDATA:[_remainder]}"
        ]
      }
      id => "filter/grok/ulogd-ecs/parse"
    }

    if [network][type] == "08:00" {
      mutate {
        replace => { "[network][type]" => "ipv4" }
        id => "filter/mutate/ulogd-ecs/v4"
      }
    } else if [network][type] == "86:dd" {
      mutate {
        replace => { "[network][type]" => "ipv6" }
        id => "filter/mutate/ulogd-ecs/v6"
      }
    }

   if [network][transport] == "TCP" {
     # extract TCP flags
     ruby { code => "event.set('[network][tcp_flags]', %w[NS CWR ECE URG ACK PSH RST SYN FIN].map { |flag| flag if (event.get('[_remainder]') || '').include? ' ' + flag + ' ' }.compact)" }
   }

    # clean up unnecessary fields
    # copy ip fields into domain fields to be overwritten by dns filter
    # TODO: remove network.transport -> network.protocol when dashboards are updated
    mutate {
      rename => {
        "program" => "[service][type]"
        "host" => "[host][name]"
        "message" => "[log][original]"
        "level" => "[log][level]"
      }
      copy => {
        "[network][transport]" => "[network][protocol]"
        "[source][ip]" => "[source][domain]"
        "[destination][ip]" => "[destination][domain]"
      }
      add_field => { "[ecs][version]" => "1.11.0" }
      remove_field => ["type", "_remainder"]
      id => "filter/mutate/ulogd-ecs/cleanup"
    }

    if "_grokparsefailure" not in [tags] {
      # Reverse lookup IP addresses in the domain fields and overwrite with the result
      # Large cache, 4h TTL, no retries
      dns {
        reverse => [ "[source][domain]", "[destination][domain]" ]
        action => "replace"
        hit_cache_size => 10000
        hit_cache_ttl => 14400
        failed_cache_size => 10000
        failed_cache_ttl => 14400
        max_retries => 0
        id => "filter/dns/ulogd-ecs/dns_lookup_src_and_dest_domains"
      }
    }
  }
}
