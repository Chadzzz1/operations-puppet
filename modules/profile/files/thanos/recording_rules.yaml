groups:
  - name: service_slis
    rules:
      - record: cluster_site:sli_etcd_http_error_ratio:increase90d
        expr: 100 * sum by (cluster, site) (increase(etcd_http_failed_total{code=~"5.."}[90d])) /
                    sum by (cluster, site) (increase(etcd_http_received_total[90d]))

      - record: cluster_site:sli_etcd_http_error_ratio:increase91d
        expr: 100 * sum by (cluster, site) (increase(etcd_http_failed_total{code=~"5.."}[91d])) /
                    sum by (cluster, site) (increase(etcd_http_received_total[91d]))

      - record: cluster_site:sli_etcd_http_error_ratio:increase92d
        expr: 100 * sum by (cluster, site) (increase(etcd_http_failed_total{code=~"5.."}[92d])) /
                    sum by (cluster, site) (increase(etcd_http_received_total[92d]))

  - name: service_slo_targets
    rules:
      - record: service:error_slo:percent
        labels:
          service: "etcd"
        expr: 0.1

  - name: traffic
    rules:
      - record: site_cluster:haproxy_requests:avail2m
        expr: sum by(site, cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code="5xx"})
          / sum by(site, cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code=~"[12345]xx"})
      - record: global_job:haproxy_requests:avail2m
        expr: sum by(cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code="5xx"})
          / sum by(cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code=~"[12345]xx"})

  # Aggregated exporter metrics.
  #
  # The "<service>_up" metrics are exported by Prometheus sidecar exporter (e.g. mysql-exporter,
  # when the service itself doesn't support Prometheus natively).
  #
  # Such metrics are used to catch conditions such as the following:
  # * the exporter itself is up and able to export metrics to Prometheus (therefore the "up" metric is 1)
  # * the exporter can't talk to the underlying service (e.g. mysql is down, thus "mysql_up" is 0)
  #
  # The label_replace function is used to attach a new "exporter" label to the aggregated metric.
  - name: exporters
    rules:
      - record: exporter:up:avail
        expr: label_replace(
          sum(mysql_up) without (instance) / count(mysql_up) without (instance),
          "exporter", "mysql",
          "", ""
        )

      - record: exporter:up:avail
        expr: label_replace(
          sum(apache_up) without (instance) / count(apache_up) without (instance),
          "exporter", "apache",
          "", ""
        )
