#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
#
# Create QCOW2 image for some CI jobs requiring to run Docker inside a VM.
#
# To run this script you require at least: coreutils, curl, libguesttools
#
# This download an official Debian cloud image and validate the checksum. It
# creates a "grown" image with extended disk space and on top of that add a
# qcow2 layer in which our modifications are added:
#
# - Debian upstream image comes with a ssh daemon, it needs the ssh host key to
# be regenerated via `dpkg-reconfigure openssh-server`.
# - authorize a ssh key generated by Puppet for the root user
# - add various packages.
#
# This are done using `virt-customize` which boot the image and has all the
# real magic.
#
# The images will be created in the current working directory or to a directory
# passed as an argument (ex: ci-build-images.sh /some/path).
#
# Antoine "hashar" Musso - 2022
#
# Loosely adapted https://www.mediawiki.org/wiki/Continuous_integration/Qemu#Runbook
# by Timo Tijhof, Adam Shortland, Dave Pifke

set -eu -o pipefail

PATH=/usr/bin:/bin

# Metadata for the Debian official cloud image
#
# The cloud images are at https://cloud.debian.org/images/cloud/
#
# We use the `nocloud` variant since we boot the image with Qemu rather than
# via a cloud provider. Hence we do not need cloud-init support or any extra.
#
# To update browse upstream site, pick the Debian distribution then the latest
# date. The checksum is in the file `SHA512SUMS`.
#
url=https://cloud.debian.org/images/cloud/bullseye/20220121-894/debian-11-nocloud-amd64-20220121-894.qcow2
sha512sum=c2444ac311ba9a9784b179ae6ef1e9adaf253cb3c725d2adc900344a7a4c7c172fa2522d2ef78af1add63d10d35ded97eb5c604de8469516f7b3c8cc8432b12b

# Filename of our images
debian_image=$(basename "$url")
grown_image=grown.qcow2
ci_image=debian-11-ci.qcow2

# Disk size to allocate in the $grown_image
disk_size=5G

# ssh key to authorize. Generated by Puppet
# Nothing is injected when the file does not exist
ssh_key=sshkey_qemu_root_v1

# Packages to add
base_pkgs='ssh,git,docker.io'
# Packages for mw-cli jobs T248779
mw_cli_job_pkgs='curl,make,python3-dev,libffi-dev,gcc,libc-dev,cargo'

pkgs="$base_pkgs","$mw_cli_job_pkgs"

customizations=(
    # Debian official image has /dev/sda1 but virt-resize will renumber
    # partitions and it ends up at /dev/sda3. We have to refresh grub.
    '--run-command' 'grub-install /dev/sda'

    # apt-get update && apt-get upgrade
    '--update'

    # Trigger generation of ssh host key
    '--run-command' 'dpkg-reconfigure openssh-server'

    # Install our packages
    '--install' "$pkgs"

    # See SSH KEYS in virt-builder(1) man page
    '--ssh-inject' "root:file:$ssh_key.pub"
)

### Start of script ###

basedir=${1:-$(pwd)}
pushd "$basedir" > /dev/null

if [ ! -f "$debian_image" ]; then
    echo "Downloading base image from Debian"

    trap 'echo "Error downloading image"; rm -f "$debian_image"' EXIT
    curl -L -O "$url"
    trap EXIT

    if [ -f "$ci_image" ] || [ -f "$grown_image" ]; then
        echo "Deleting obsolete images '$grown_image' '$ci_image'"
        rm -vf "$grown_image" "$ci_image"
    fi
fi

if [ ! -f "$grown_image" ]; then
    # Validation is done there so that we can retry download as needed. We can
    # get an invalidate image, as long as we do not use it it does not really
    # matter.
    #
    # The grown image is about to be created, now is the time to validate.
    #
    echo "Veryfing checksum of Debian image '$debian_image'"
    sha512sum -c <(printf "%s %s\n" "$sha512sum" "$debian_image") || {
        echo "ERROR: failed to verify sha512sum for '$debian_image'"
        rm -fv "$debian_image"
        exit 1
    }

    echo "Creating a grown image with $disk_size disk size"
    # Copied directly from virt-resize(1) man page
    # Albeit without `-o preallocation=metadata`
    trap 'echo "Error creating grown image $grown_image"; rm -fv $grown_image' EXIT
    qemu-img create -f qcow2 "$grown_image" "$disk_size"
    virt-resize --expand /dev/sda1 "$debian_image" "$grown_image"

    trap EXIT
fi

if [ ! -f "$ssh_key" ]; then
    echo "Generating a ssh key pair '$ssh_key'"
    # There is intentionally no password to connect to the VM
    /usr/bin/ssh-keygen -N '' -f "$ssh_key"
    chmod go+r "$ssh_key"
fi

if [ ! -f "$ci_image" ]; then
    echo "Creating our CI specific qcow2 layer"

    trap 'echo "Error creating CI image $ci_image"; rm -fv $ci_image' EXIT
    qemu-img create -F qcow2 -b "$grown_image" -f qcow2 "$ci_image"

    # See start of script for list of customizations
    virt-customize -a "$ci_image" "${customizations[@]}"
    trap EXIT
else
    echo "CI image already exists: $ci_image"
fi
echo "$(basename "$0") has completed successfully"
