address:
    socket_address:
        address: 0.0.0.0
        port_value: <%= @name %>
listener_filters:
- name: "envoy.listener.tls_inspector"
  typed_config: {}
tcp_fast_open_queue_length: <%= @fast_open_queue %>
filter_chains:
<%- @upstreams.each do |upstream| -%>
<%- if upstream['cert_path'] != :undef -%>
- filter_chain_match:
    server_names: <%= upstream['server_names'] %>
  tls_context:
    common_tls_context:
      tls_certificates:
      - certificate_chain: { filename: "<%= upstream['cert_path'] %>" }
        private_key: { filename: "<%= upstream['key_path'] %>" }
  filters:
  - name: envoy.http_connection_manager
    typed_config:
      "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
<%- if @websockets -%>
      upgrade_configs:
      - upgrade_type: "websocket"
<%- end -%>
      stat_prefix: ingress_http
<%- if @access_log -%>
      access_log:
      - name: envoy.file_access_log
        filter:
          status_code_filter:
            comparison:
              op: "GE"
              value:
                default_value: 500
                runtime_key: <%= upstream['cert_name'] %>_min_log_code
        typed_config:
          "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
          path: "/var/log/envoy/<%= upstream['cert_name'] %>.log"
<%- end -%>
      route_config:
        virtual_hosts:
        - name: default
          domains: ["*"]
          routes:
          - match: { prefix: "/" }
            route:
              cluster: local_port_<%= upstream['upstream_port'] %>
              timeout: <%= @route_timeout %>s
              <%- if @retry_policy != nil -%>
              retry_policy:
                <%- @retry_policy.each do |k, v| -%>
                <%= k %>: <%= scope.call_function('to_json',[v]) %>
                <%- end -%>
              <%- end -%>
      http_filters: [{name: envoy.router, typed_config: {}}]
      server_header_transformation: APPEND_IF_ABSENT
<%- end -%>
<%- end -%>
<%- if @global_cert_path != nil && @global_key_path != nil -%>
# Non-SNI support
- tls_context:
    common_tls_context:
      tls_certificates:
      - certificate_chain: { filename: "<%= @global_cert_path %>" }
        private_key: { filename: "<%= @global_key_path %>" }
  filters:
  - name: envoy.http_connection_manager
    typed_config:
      "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
<%- if @websockets -%>
      upgrade_configs:
      - upgrade_type: "websocket"
<%- end -%>
      stat_prefix: ingress_http
<%- if @use_remote_address -%>
      use_remote_address: true
      skip_xff_append: false
<%- end -%>
<%- if @access_log -%>
      access_log:
      - name: envoy.file_access_log
        filter:
          status_code_filter:
            comparison:
              op: "GE"
              value:
                default_value: 500
                runtime_key: global_tls_min_log_code
        typed_config:
          "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
          path: "/var/log/envoy/global_tls.log"
<%- end -%>
      route_config:
        virtual_hosts:
        <%- @upstreams.each do |upstream| -%>
        - name: non_sni_port_<%= upstream['upstream_port'] %>
          domains: <%= upstream['server_names'] %>
          routes:
          - match: { prefix: "/" }
            route:
              cluster: local_port_<%= upstream['upstream_port'] %>
              timeout: <%= @route_timeout %>s
              <%- if @retry_policy != nil -%>
              retry_policy:
                <%- @retry_policy.each do |k, v| -%>
                <%= k %>: <%= scope.call_function('to_json',[v]) %>
                <%- end -%>
              <%- end -%>
        <%- end -%>
      http_filters: [{name: envoy.router, typed_config: {}}]
      http_protocol_options:
        accept_http_10: true
      server_header_transformation: APPEND_IF_ABSENT
<%- end -%>
