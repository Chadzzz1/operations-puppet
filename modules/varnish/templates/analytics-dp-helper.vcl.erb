<%#- SPDX-License-Identifier: Apache-2.0 -%>
C{
    #include <fcntl.h>
    #include <string.h>
    #include <unistd.h>
    #include <sodium.h>

    #define KEY_FILE "/etc/varnish/dp.daily.key"

    unsigned char key[crypto_shorthash_KEYBYTES];

    static void dp_hash(const struct vrt_ctx *ctx) {
        // define hash output buffer and key buffer
        unsigned char hash[crypto_shorthash_BYTES];
        char hexhash[2 * crypto_shorthash_BYTES + 1];
        char outputhash[4] = { 0 };

        const struct gethdr_s hdr = { HDR_REQ, "\012X-Page-ID:" };
        const char* page_id = VRT_GetHdr(ctx, &hdr);
        if (!page_id)
            return;

        // hash the page ID and put results into output buffer
        crypto_shorthash(hash, (unsigned char*) page_id, strlen(page_id), key);

        // convert hash to hex and shorten it to 3 chars
        sodium_bin2hex(hexhash, sizeof(hexhash), hash, sizeof(hash));
        memcpy(outputhash, hexhash, 3);

        // pass hash to the header to make sure it's accessible outside of this C{} block
        const struct gethdr_s shdr = {
            HDR_REQ,
            "\007X-Hash:" // length prefixed string, in octal
        };
        VRT_SetHdr(ctx, &shdr, outputhash, vrt_magic_string_end);
    }
}C

sub vcl_init {
    C{
        if (sodium_init() == -1) {
            VRT_fail(ctx, "sodium_init() failed!");
            return;
        }
    }C
    call reload_hash_key_vcl;
}

sub dp_hash_vcl {
    C{dp_hash(ctx);}C
}

sub reload_hash_key_vcl {
    C{
        const int key_fd = open(KEY_FILE, O_CLOEXEC | O_RDONLY);
        if (key_fd < 0) {
            VRT_fail(ctx, "unable to open diffpriv key file!");
            return;
        }
        const ssize_t readrv = read(key_fd, key, crypto_shorthash_KEYBYTES);
        int error = 0;
        if (readrv != crypto_shorthash_KEYBYTES) {
            error = 1;
        }
        if (close(key_fd) != 0) {
            error = 1;
        }
        if (error) {
            VRT_fail(ctx, "unable to read diffpriv key");
            return;
        }
    }C
}
