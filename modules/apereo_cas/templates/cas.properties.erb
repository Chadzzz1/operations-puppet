<%-
def get_addresses(hostnames)
  answers = []
  hostnames.each do |hostname|
    Resolv::DNS.open do |dns|
      [Resolv::DNS::Resource::IN::A, Resolv::DNS::Resource::IN::AAAA].each do |rrtype|
        answer = dns.getresources(hostname, rrtype)
        next if answer.empty?
        answers << answer.map { |ans| ans.address.to_s }
      end
    end
  end
  raise Puppet::Error, "#{hostnames.join(',')} do not resolve" if answers.empty?
  answers.flatten.sort
end
-%>
server.ssl.keyStore=file:<%= @keystore_path %>
server.ssl.keyStorePassword=<%= @keystore_password %>
server.ssl.keyPassword=<%= @key_password %>
server.port=<%= @server_port %>
server.servlet.context-path=<%= @server_prefix %>
cas.server.name=<%= @server_name %>
cas.server.prefix=<%= @server_name %><%= @server_prefix %>
server.ssl.enabled=<%= @server_enable_ssl %>
server.tomcat.basedir=<%= @tomcat_basedir %>
<%- if @tomcat_proxy -%>
# we proxy from nginx over localhost
server.tomcat.internal-proxies=127\\.0\\.0\\.1
management.endpoints.web.base-path=/api

cas.server.tomcat.http.enabled=false
cas.server.tomcat.httpProxy.enabled=true
cas.server.tomcat.httpProxy.secure=true
cas.server.tomcat.httpProxy.scheme=https
cas.server.tomcat.httpProxy.protocol=HTTP/1.1
<%- end -%>

<%- unless @prometheus_nodes.empty? %>
management.metrics.tags.application=${spring.application.name}
management.metrics.export.prometheus.enabled=true
management.endpoints.web.exposure.include=prometheus
management.endpoint.prometheus.enabled=true
cas.monitor.endpoints.endpoint.prometheus.access=IP_ADDRESS
cas.monitor.endpoints.endpoint.prometheus.requiredIpAddresses=::1,127.0.0.1,<%= get_addresses(@prometheus_nodes).join(',') %>
<%- end -%>

cas.serviceRegistry.json.location=file:<%= @services_dir %>
logging.config: file:/etc/cas/config/log4j2.xml
logging.level.org.apereo=<%= @log_level %>

cas.authn.accept.users=

cas.ticket.tgt.maxTimeToLiveInSeconds=<%= @max_session_length %>

cas.authn.ldap[0].principalAttributeList=<%= @ldap_attribute_list.join(',') %>
cas.authn.ldap[0].type=<%= @ldap_auth %>
cas.authn.ldap[0].connectionStrategy=<%= @ldap_connection %>
cas.authn.ldap[0].ldapurl=<%= @ldap_uris.join(' ') %>
cas.authn.ldap[0].useStartTLS=<%= @ldap_start_tls %>
cas.authn.ldap[0].basedn=<%= @ldap_base_dn %>
cas.authn.ldap[0].searchFilter=<%= @ldap_search_filter %>
cas.authn.ldap[0].binddn=<%= @ldap_bind_dn %>
cas.authn.ldap[0].bindcredential=<%= @ldap_bind_pass %>

<%- if @groovy_source -%>
cas.authn.mfa.globalPrincipalAttributePredicate=file:<%= @groovy_file -%>
<%- else -%>
cas.authn.mfa.globalPrincipalAttributeNameTriggers=<%= @mfa_attribute_trigger %>
cas.authn.mfa.globalPrincipalAttributeValueRegex=<%= @mfa_attribut_value.join('|') %>
<%- end -%>

<%- if @enable_totp -%>
cas.authn.mfa.gauth.json.location=file://<%= @totp_devices_path %>
<% if @totp_signing_key %>cas.authn.mfa.gauth.crypto.signing.key=<%= @totp_signing_key %><% end %>
<% if @totp_encryption_key %>cas.authn.mfa.gauth.crypto.encryption.key=<%= @totp_encryption_key %><% end %>
<%- end -%>

<%- if @enable_u2f -%>
cas.authn.mfa.u2f.json.location=file://<%= @u2f_devices_path %>
<% if @u2f_signing_key %>cas.authn.mfa.u2f.crypto.signing.key=<%= @u2f_signing_key %><% end %>
<% if @u2f_encryption_key %>cas.authn.mfa.u2f.crypto.encryption.key=<%= @u2f_encryption_key %><% end %>
<%- end -%>

<% if @tgc_signing_key %>cas.tgc.crypto.signing.key=<%= @tgc_signing_key %><% end %>
<% if @tgc_encryption_key %>cas.tgc.crypto.encryption.key=<%= @tgc_encryption_key %><% end %>
<% if @webflow_signing_key %>cas.webflow.crypto.signing.key=<%= @webflow_signing_key %><% end %>
<% if @webflow_encryption_key %>cas.webflow.crypto.encryption.key=<%= @webflow_encryption_key %><% end %>
