cluster: scb
admin::groups:
  - sc-admins
  - cpjobqueue-admin
  - apertium-admins
  - graphoid-admin
  - mobileapps-admin
  - changeprop-admin
  - recommendation-admin
role::lvs::realserver::pools:
  apertium: {}
  mobileapps: {}
  graphoid: {}
  eventstreams: {}
  "recommendation-api": {}

### BEGIN GRAPHOID
profile::graphoid::allowed_domains:
  https:
    - mediawiki.org
    - wikibooks.org
    - wikidata.org
    - wikimedia.org
    - wikimediafoundation.org
    - wikinews.org
    - wikipedia.org
    - wikiquote.org
    - wikisource.org
    - wikiversity.org
    - wikivoyage.org
    - wiktionary.org
  wikirawupload:
    - upload.wikimedia.org
  wikidatasparql:
    - query.wikidata.org
  geoshape:
    - maps.wikimedia.org
profile::graphoid::headers:
  'Cache-Control': 'public, s-maxage=3600, max-age=3600'
profile::graphoid::error_headers:
  'Cache-Control': 'public, s-maxage=300, max-age=300'
### END GRAPHOID ###

### BEGIN EVENTSTREAMS ###
# EventStreams is configured in discovery.yaml to be active/active.
# It runs in both primary datacenters and is backed by the local
# 'main' Kafka cluster there.  If eqiad is the active Mediawiki
# DC, then the EventStreams instance in codfw consuming
# from main-codfw relies on MirrorMaker to replicate events
# from main-eqiad. This should usually be fine. If MirrorMaker
# is down, events will be delayed, but clients will get these
# events delivered when MirrorMaker resumes.
profile::eventstreams::kafka_cluster_name: main
profile::eventstreams::monitoring_enabled: true
# Limit the number of connected clients from the same
# X-Client-IP per eventstreams worker to 1.  In prod,
# we run 4 hosts * 24 processors (workers) == 96
# workers.  If a user is trying to open multiple connections
# and they happen to be routed to the same worker, they
# will be denied.  This is unfortunate if the client
# is only opening a few connections, but they should
# eventually be able to get through to multiple workers.
# A malfunctioning client could still use up 96 total
# connections...and there are only 200 connection slots
# available in varnish (as of 2019-07).  This is better
# than being able to use them all up. :/
# See also: https://phabricator.wikimedia.org/T226808#5292059
profile::eventstreams::client_ip_connection_limit: 1

# Stream configuration for Public EventStreams service
# Maps stream route names to composite Kafka topics.
profile::eventstreams::streams:
  page-create:
    description: "Mediawiki Page Create feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/create"
    topics:
      - eqiad.mediawiki.page-create
      - codfw.mediawiki.page-create
  page-delete:
    description: "Mediawiki Page Delete feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/delete"
    topics:
      - eqiad.mediawiki.page-delete
      - codfw.mediawiki.page-delete
  page-move:
    description: "Mediawiki Page Move feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/move"
    topics:
      - eqiad.mediawiki.page-move
      - codfw.mediawiki.page-move
  page-undelete:
    description: "Mediawiki Page Delete feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/undelete"
    topics:
      - eqiad.mediawiki.page-undelete
      - codfw.mediawiki.page-undelete
  page-properties-change:
    description: "Mediawiki Page Properties Change feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/properties-change"
    topics:
      - eqiad.mediawiki.page-properties-change
      - codfw.mediawiki.page-properties-change
  page-links-change:
    description: "Mediawiki Page Links Change feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/blob/master/jsonschema/mediawiki/page/links-change"
    topics:
      - eqiad.mediawiki.page-links-change
      - codfw.mediawiki.page-links-change
  recentchange:
    description: "Mediawiki RecentChanges feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/tree/master/jsonschema/mediawiki/recentchange"
    topics:
      - eqiad.mediawiki.recentchange
      - codfw.mediawiki.recentchange
  revision-create:
    description: "Mediawiki Revision Create feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/tree/master/jsonschema/mediawiki/revision/create"
    topics:
      - eqiad.mediawiki.revision-create
      - codfw.mediawiki.revision-create
  # Disable public revision-score events until we figure out a good schema.
  # See: https://phabricator.wikimedia.org/T197000
  # revision-score:
  #   description: "Mediawiki Revision Score feed. Schema: https://github.com/wikimedia/mediawiki-event-schemas/tree/master/jsonschema/mediawiki/revision/score"
  #   topics:
  #     - eqiad.mediawiki.revision-score
  #     - codfw.mediawiki.revision-score
  test:
    description: "Test event stream. A new event is posted about once a minute. Schema: https://github.com/wikimedia/mediawiki-event-schemas/tree/master/jsonschema/test/event"
    topics:
      - eqiad.test.event
      - codfw.test.event

# rdkafka config for Public EventStreams service.
profile::eventstreams::rdkafka_config:
  # Send rdkafka stats to statsd once per minute.
  statistics.interval.ms: 60000

### END EVENTSTREAMS ###

### BEGIN CHANGEPROP ###
profile::changeprop::restbase_uri: http://restbase-async.discovery.wmnet:7231
profile::changeprop::purge_host: 239.128.0.112
profile::changeprop::purge_port: 4827
profile::changeprop::ores_uris:
  - http://ores.svc.eqiad.wmnet:8081
  - http://ores.svc.codfw.wmnet:8081
profile::changeprop::eventbus_uri: http://eventbus.discovery.wmnet:8085
### END CHANGEPROP ###
profile::nutcracker::memcached_pools: {}
profile::nutcracker::monitor_port: 0 # we have nothing exposed via tcp

# Recommendation API
profile::recommendation_api::wdqs_uri: http://wdqs-internal.discovery.wmnet
profile::recommendation_api::dbhost: m2-master.eqiad.wmnet
profile::recommendation_api::dbname: recommendationapi
profile::recommendation_api::dbuser: recommendationapiservice

# ChangePropagation for JobQueue
profile::cpjobqueue::redis_path: "/var/run/nutcracker/redis_%{::site}.sock"
profile::cpjobqueue::jobrunner_host: https://jobrunner.discovery.wmnet
profile::cpjobqueue::videoscaler_host: https://videoscaler.discovery.wmnet

diamond::remove: true
