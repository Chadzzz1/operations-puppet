profile::cache::haproxy::acls:
  - name: cache_miss
    criterion: res.hdr(X-Cache-Status)
    operator: -m str
    value: miss
  - name: cache_pass
    criterion: res.hdr(X-Cache-Status)
    operator: -m str
    value: pass
  - name: backend_saturation
    criterion: be_conn
    operator: gt
    value: '1000'
  - name: concurrent_queries
    criterion: sc0_trackers(httpreqrate)
    operator: gt
    value: '150'
  - name: excessive_new_conns
    criterion: sc1_conn_rate(newconnrate)
    operator: gt
    value: '200'

profile::cache::haproxy::vars:
  - direction: request
    name: req.dummy_connection_drop
    value: src,debug(would_drop,stderr)
    acl: backend_saturation concurrent_queries
  - direction: request
    name: req.dummy_excess_concurrency
    value: src,debug(excess_concurrency,stderr)
    acl: concurrent_queries
  - direction: request
    name: req.dummy_excessive_new_conns
    value: src,debug(excessive_new_conns,stderr)
    acl: excessive_new_conns


profile::cache::haproxy::sticktables:
  - name: httpreqrate
    type: ipv6
    size: 1m
    expire: 60s
    store:
      - http_req_rate(10s)
  - name: newconnrate
    type: ipv6
    size: 1m
    expire: 60s
    store:
      - conn_rate(10s)

profile::cache::haproxy::stickycounters:
  - context: http-request
    key: src
    table: httpreqrate
  - context: tcp-request connection
    key: src
    table: newconnrate

lookup_options:
  profile::cache::haproxy::acls:
    merge:
      strategy: unique
  profile::cache::haproxy::vars:
    merge:
      strategy: unique
